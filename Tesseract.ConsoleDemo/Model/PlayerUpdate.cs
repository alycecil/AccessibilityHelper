/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PlayerUpdate
    /// </summary>
    [DataContract]
    public partial class PlayerUpdate : IEquatable<PlayerUpdate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerUpdate" /> class.
        /// </summary>
        /// <param name="combatWindowOpen">combatWindowOpen.</param>
        /// <param name="exitedCombat">exitedCombat.</param>
        /// <param name="hp">hp.</param>
        /// <param name="mana">mana.</param>
        /// <param name="name">name.</param>
        /// <param name="weaponStatus">weaponStatus.</param>
        /// <param name="weight">weight.</param>
        public PlayerUpdate(bool? combatWindowOpen = default(bool?), bool? exitedCombat = default(bool?),
            int? hp = default(int?),
            int? hpMax = default(int?), int? mana = default(int?), string name = default(string),
            int? weaponStatus = default(int?), int? weight = default(int?))
        {
            this.CombatWindowOpen = combatWindowOpen;
            this.ExitedCombat = exitedCombat;
            this.Hp = hp;
            this.HpMax = hpMax;
            this.Mana = mana;
            this.Name = name;
            this.WeaponStatus = weaponStatus;
            this.Weight = weight;
        }

        /// <summary>
        /// Gets or Sets CombatWindowOpen
        /// </summary>
        [DataMember(Name = "combatWindowOpen", EmitDefaultValue = false)]
        public bool? CombatWindowOpen { get; set; }

        /// <summary>
        /// Gets or Sets ExitedCombat
        /// </summary>
        [DataMember(Name = "exitedCombat", EmitDefaultValue = false)]
        public bool? ExitedCombat { get; set; }

        /// <summary>
        /// Gets or Sets Hp
        /// </summary>
        [DataMember(Name = "hp", EmitDefaultValue = false)]
        public int? Hp { get; set; }
        
        
        [DataMember(Name = "hpMax", EmitDefaultValue = false)]
        public int? HpMax { get; set; }

        /// <summary>
        /// Gets or Sets Mana
        /// </summary>
        [DataMember(Name = "mana", EmitDefaultValue = false)]
        public int? Mana { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets WeaponStatus
        /// </summary>
        [DataMember(Name = "weaponStatus", EmitDefaultValue = false)]
        public int? WeaponStatus { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public int? Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayerUpdate {\n");
            sb.Append("  CombatWindowOpen: ").Append(CombatWindowOpen).Append("\n");
            sb.Append("  ExitedCombat: ").Append(ExitedCombat).Append("\n");
            sb.Append("  Hp: ").Append(Hp).Append("\n");
            sb.Append("  Mana: ").Append(Mana).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  WeaponStatus: ").Append(WeaponStatus).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlayerUpdate);
        }

        /// <summary>
        /// Returns true if PlayerUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of PlayerUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerUpdate input)
        {
            if (input == null)
                return false;

            return
                (
                    this.CombatWindowOpen == input.CombatWindowOpen ||
                    (this.CombatWindowOpen != null &&
                     this.CombatWindowOpen.Equals(input.CombatWindowOpen))
                ) &&
                (
                    this.ExitedCombat == input.ExitedCombat ||
                    (this.ExitedCombat != null &&
                     this.ExitedCombat.Equals(input.ExitedCombat))
                ) &&
                (
                    this.Hp == input.Hp ||
                    (this.Hp != null &&
                     this.Hp.Equals(input.Hp))
                ) &&
                (
                    this.Mana == input.Mana ||
                    (this.Mana != null &&
                     this.Mana.Equals(input.Mana))
                ) &&
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                     this.Name.Equals(input.Name))
                ) &&
                (
                    this.WeaponStatus == input.WeaponStatus ||
                    (this.WeaponStatus != null &&
                     this.WeaponStatus.Equals(input.WeaponStatus))
                ) &&
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                     this.Weight.Equals(input.Weight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CombatWindowOpen != null)
                    hashCode = hashCode * 59 + this.CombatWindowOpen.GetHashCode();
                if (this.ExitedCombat != null)
                    hashCode = hashCode * 59 + this.ExitedCombat.GetHashCode();
                if (this.Hp != null)
                    hashCode = hashCode * 59 + this.Hp.GetHashCode();
                if (this.Mana != null)
                    hashCode = hashCode * 59 + this.Mana.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.WeaponStatus != null)
                    hashCode = hashCode * 59 + this.WeaponStatus.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}