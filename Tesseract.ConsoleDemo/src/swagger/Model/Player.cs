/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Player
    /// </summary>
    [DataContract]
    public partial class Player :  IEquatable<Player>, IValidatableObject
    {
        /// <summary>
        /// Defines CurrentState
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrentStateEnum
        {
            
            /// <summary>
            /// Enum Idle for value: idle
            /// </summary>
            [EnumMember(Value = "idle")]
            Idle = 1,
            
            /// <summary>
            /// Enum CheckStatus for value: checkStatus
            /// </summary>
            [EnumMember(Value = "checkStatus")]
            CheckStatus = 2,
            
            /// <summary>
            /// Enum CheckHpMana for value: checkHpMana
            /// </summary>
            [EnumMember(Value = "checkHpMana")]
            CheckHpMana = 3,
            
            /// <summary>
            /// Enum CheckInventory for value: checkInventory
            /// </summary>
            [EnumMember(Value = "checkInventory")]
            CheckInventory = 4,
            
            /// <summary>
            /// Enum StashInventory for value: stashInventory
            /// </summary>
            [EnumMember(Value = "stashInventory")]
            StashInventory = 5,
            
            /// <summary>
            /// Enum SellInventory for value: sellInventory
            /// </summary>
            [EnumMember(Value = "sellInventory")]
            SellInventory = 6,
            
            /// <summary>
            /// Enum Combat for value: combat
            /// </summary>
            [EnumMember(Value = "combat")]
            Combat = 7,
            
            /// <summary>
            /// Enum Repairing for value: repairing
            /// </summary>
            [EnumMember(Value = "repairing")]
            Repairing = 8,
            
            /// <summary>
            /// Enum Hunting for value: hunting
            /// </summary>
            [EnumMember(Value = "hunting")]
            Hunting = 9,
            
            /// <summary>
            /// Enum Moving for value: moving
            /// </summary>
            [EnumMember(Value = "moving")]
            Moving = 10,
            
            /// <summary>
            /// Enum Acting for value: acting
            /// </summary>
            [EnumMember(Value = "acting")]
            Acting = 11,
            
            /// <summary>
            /// Enum Logout for value: logout
            /// </summary>
            [EnumMember(Value = "logout")]
            Logout = 12,
            
            /// <summary>
            /// Enum Login for value: login
            /// </summary>
            [EnumMember(Value = "login")]
            Login = 13,
            
            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 14
        }

        /// <summary>
        /// Gets or Sets CurrentState
        /// </summary>
        [DataMember(Name="currentState", EmitDefaultValue=false)]
        public CurrentStateEnum? CurrentState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Player" /> class.
        /// </summary>
        /// <param name="currentState">currentState.</param>
        /// <param name="hp">hp.</param>
        /// <param name="mana">mana.</param>
        /// <param name="name">name.</param>
        /// <param name="weaponStatus">weaponStatus.</param>
        /// <param name="weight">weight.</param>
        public Player(CurrentStateEnum? currentState = default(CurrentStateEnum?), Expiringint hp = default(Expiringint), Expiringint mana = default(Expiringint), string name = default(string), Expiringint weaponStatus = default(Expiringint), Expiringint weight = default(Expiringint))
        {
            this.CurrentState = currentState;
            this.Hp = hp;
            this.Mana = mana;
            this.Name = name;
            this.WeaponStatus = weaponStatus;
            this.Weight = weight;
        }
        

        /// <summary>
        /// Gets or Sets Hp
        /// </summary>
        [DataMember(Name="hp", EmitDefaultValue=false)]
        public Expiringint Hp { get; set; }

        /// <summary>
        /// Gets or Sets Mana
        /// </summary>
        [DataMember(Name="mana", EmitDefaultValue=false)]
        public Expiringint Mana { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets WeaponStatus
        /// </summary>
        [DataMember(Name="weaponStatus", EmitDefaultValue=false)]
        public Expiringint WeaponStatus { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public Expiringint Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Player {\n");
            sb.Append("  CurrentState: ").Append(CurrentState).Append("\n");
            sb.Append("  Hp: ").Append(Hp).Append("\n");
            sb.Append("  Mana: ").Append(Mana).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  WeaponStatus: ").Append(WeaponStatus).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Player);
        }

        /// <summary>
        /// Returns true if Player instances are equal
        /// </summary>
        /// <param name="input">Instance of Player to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Player input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrentState == input.CurrentState ||
                    (this.CurrentState != null &&
                    this.CurrentState.Equals(input.CurrentState))
                ) && 
                (
                    this.Hp == input.Hp ||
                    (this.Hp != null &&
                    this.Hp.Equals(input.Hp))
                ) && 
                (
                    this.Mana == input.Mana ||
                    (this.Mana != null &&
                    this.Mana.Equals(input.Mana))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.WeaponStatus == input.WeaponStatus ||
                    (this.WeaponStatus != null &&
                    this.WeaponStatus.Equals(input.WeaponStatus))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrentState != null)
                    hashCode = hashCode * 59 + this.CurrentState.GetHashCode();
                if (this.Hp != null)
                    hashCode = hashCode * 59 + this.Hp.GetHashCode();
                if (this.Mana != null)
                    hashCode = hashCode * 59 + this.Mana.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.WeaponStatus != null)
                    hashCode = hashCode * 59 + this.WeaponStatus.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
