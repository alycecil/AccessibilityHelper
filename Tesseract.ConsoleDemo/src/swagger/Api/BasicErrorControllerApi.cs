/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasicErrorControllerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ModelAndView</returns>
        ModelAndView ErrorHtmlUsingDELETE ();

        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ModelAndView</returns>
        ApiResponse<ModelAndView> ErrorHtmlUsingDELETEWithHttpInfo ();
        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ModelAndView</returns>
        ModelAndView ErrorHtmlUsingGET ();

        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ModelAndView</returns>
        ApiResponse<ModelAndView> ErrorHtmlUsingGETWithHttpInfo ();
        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ModelAndView</returns>
        ModelAndView ErrorHtmlUsingHEAD ();

        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ModelAndView</returns>
        ApiResponse<ModelAndView> ErrorHtmlUsingHEADWithHttpInfo ();
        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ModelAndView</returns>
        ModelAndView ErrorHtmlUsingOPTIONS ();

        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ModelAndView</returns>
        ApiResponse<ModelAndView> ErrorHtmlUsingOPTIONSWithHttpInfo ();
        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ModelAndView</returns>
        ModelAndView ErrorHtmlUsingPATCH ();

        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ModelAndView</returns>
        ApiResponse<ModelAndView> ErrorHtmlUsingPATCHWithHttpInfo ();
        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ModelAndView</returns>
        ModelAndView ErrorHtmlUsingPOST ();

        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ModelAndView</returns>
        ApiResponse<ModelAndView> ErrorHtmlUsingPOSTWithHttpInfo ();
        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ModelAndView</returns>
        ModelAndView ErrorHtmlUsingPUT ();

        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ModelAndView</returns>
        ApiResponse<ModelAndView> ErrorHtmlUsingPUTWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ModelAndView</returns>
        System.Threading.Tasks.Task<ModelAndView> ErrorHtmlUsingDELETEAsync ();

        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ModelAndView)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelAndView>> ErrorHtmlUsingDELETEAsyncWithHttpInfo ();
        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ModelAndView</returns>
        System.Threading.Tasks.Task<ModelAndView> ErrorHtmlUsingGETAsync ();

        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ModelAndView)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelAndView>> ErrorHtmlUsingGETAsyncWithHttpInfo ();
        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ModelAndView</returns>
        System.Threading.Tasks.Task<ModelAndView> ErrorHtmlUsingHEADAsync ();

        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ModelAndView)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelAndView>> ErrorHtmlUsingHEADAsyncWithHttpInfo ();
        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ModelAndView</returns>
        System.Threading.Tasks.Task<ModelAndView> ErrorHtmlUsingOPTIONSAsync ();

        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ModelAndView)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelAndView>> ErrorHtmlUsingOPTIONSAsyncWithHttpInfo ();
        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ModelAndView</returns>
        System.Threading.Tasks.Task<ModelAndView> ErrorHtmlUsingPATCHAsync ();

        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ModelAndView)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelAndView>> ErrorHtmlUsingPATCHAsyncWithHttpInfo ();
        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ModelAndView</returns>
        System.Threading.Tasks.Task<ModelAndView> ErrorHtmlUsingPOSTAsync ();

        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ModelAndView)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelAndView>> ErrorHtmlUsingPOSTAsyncWithHttpInfo ();
        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ModelAndView</returns>
        System.Threading.Tasks.Task<ModelAndView> ErrorHtmlUsingPUTAsync ();

        /// <summary>
        /// errorHtml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ModelAndView)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelAndView>> ErrorHtmlUsingPUTAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BasicErrorControllerApi : IBasicErrorControllerApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicErrorControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BasicErrorControllerApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicErrorControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BasicErrorControllerApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ModelAndView</returns>
        public ModelAndView ErrorHtmlUsingDELETE ()
        {
             ApiResponse<ModelAndView> localVarResponse = ErrorHtmlUsingDELETEWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ModelAndView</returns>
        public ApiResponse< ModelAndView > ErrorHtmlUsingDELETEWithHttpInfo ()
        {

            var localVarPath = "/error";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorHtmlUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelAndView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelAndView) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelAndView)));
        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ModelAndView</returns>
        public async System.Threading.Tasks.Task<ModelAndView> ErrorHtmlUsingDELETEAsync ()
        {
             ApiResponse<ModelAndView> localVarResponse = await ErrorHtmlUsingDELETEAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ModelAndView)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelAndView>> ErrorHtmlUsingDELETEAsyncWithHttpInfo ()
        {

            var localVarPath = "/error";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorHtmlUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelAndView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelAndView) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelAndView)));
        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ModelAndView</returns>
        public ModelAndView ErrorHtmlUsingGET ()
        {
             ApiResponse<ModelAndView> localVarResponse = ErrorHtmlUsingGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ModelAndView</returns>
        public ApiResponse< ModelAndView > ErrorHtmlUsingGETWithHttpInfo ()
        {

            var localVarPath = "/error";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorHtmlUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelAndView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelAndView) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelAndView)));
        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ModelAndView</returns>
        public async System.Threading.Tasks.Task<ModelAndView> ErrorHtmlUsingGETAsync ()
        {
             ApiResponse<ModelAndView> localVarResponse = await ErrorHtmlUsingGETAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ModelAndView)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelAndView>> ErrorHtmlUsingGETAsyncWithHttpInfo ()
        {

            var localVarPath = "/error";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorHtmlUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelAndView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelAndView) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelAndView)));
        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ModelAndView</returns>
        public ModelAndView ErrorHtmlUsingHEAD ()
        {
             ApiResponse<ModelAndView> localVarResponse = ErrorHtmlUsingHEADWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ModelAndView</returns>
        public ApiResponse< ModelAndView > ErrorHtmlUsingHEADWithHttpInfo ()
        {

            var localVarPath = "/error";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorHtmlUsingHEAD", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelAndView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelAndView) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelAndView)));
        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ModelAndView</returns>
        public async System.Threading.Tasks.Task<ModelAndView> ErrorHtmlUsingHEADAsync ()
        {
             ApiResponse<ModelAndView> localVarResponse = await ErrorHtmlUsingHEADAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ModelAndView)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelAndView>> ErrorHtmlUsingHEADAsyncWithHttpInfo ()
        {

            var localVarPath = "/error";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorHtmlUsingHEAD", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelAndView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelAndView) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelAndView)));
        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ModelAndView</returns>
        public ModelAndView ErrorHtmlUsingOPTIONS ()
        {
             ApiResponse<ModelAndView> localVarResponse = ErrorHtmlUsingOPTIONSWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ModelAndView</returns>
        public ApiResponse< ModelAndView > ErrorHtmlUsingOPTIONSWithHttpInfo ()
        {

            var localVarPath = "/error";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.OPTIONS, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorHtmlUsingOPTIONS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelAndView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelAndView) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelAndView)));
        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ModelAndView</returns>
        public async System.Threading.Tasks.Task<ModelAndView> ErrorHtmlUsingOPTIONSAsync ()
        {
             ApiResponse<ModelAndView> localVarResponse = await ErrorHtmlUsingOPTIONSAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ModelAndView)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelAndView>> ErrorHtmlUsingOPTIONSAsyncWithHttpInfo ()
        {

            var localVarPath = "/error";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.OPTIONS, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorHtmlUsingOPTIONS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelAndView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelAndView) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelAndView)));
        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ModelAndView</returns>
        public ModelAndView ErrorHtmlUsingPATCH ()
        {
             ApiResponse<ModelAndView> localVarResponse = ErrorHtmlUsingPATCHWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ModelAndView</returns>
        public ApiResponse< ModelAndView > ErrorHtmlUsingPATCHWithHttpInfo ()
        {

            var localVarPath = "/error";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorHtmlUsingPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelAndView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelAndView) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelAndView)));
        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ModelAndView</returns>
        public async System.Threading.Tasks.Task<ModelAndView> ErrorHtmlUsingPATCHAsync ()
        {
             ApiResponse<ModelAndView> localVarResponse = await ErrorHtmlUsingPATCHAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ModelAndView)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelAndView>> ErrorHtmlUsingPATCHAsyncWithHttpInfo ()
        {

            var localVarPath = "/error";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorHtmlUsingPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelAndView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelAndView) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelAndView)));
        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ModelAndView</returns>
        public ModelAndView ErrorHtmlUsingPOST ()
        {
             ApiResponse<ModelAndView> localVarResponse = ErrorHtmlUsingPOSTWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ModelAndView</returns>
        public ApiResponse< ModelAndView > ErrorHtmlUsingPOSTWithHttpInfo ()
        {

            var localVarPath = "/error";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorHtmlUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelAndView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelAndView) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelAndView)));
        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ModelAndView</returns>
        public async System.Threading.Tasks.Task<ModelAndView> ErrorHtmlUsingPOSTAsync ()
        {
             ApiResponse<ModelAndView> localVarResponse = await ErrorHtmlUsingPOSTAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ModelAndView)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelAndView>> ErrorHtmlUsingPOSTAsyncWithHttpInfo ()
        {

            var localVarPath = "/error";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorHtmlUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelAndView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelAndView) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelAndView)));
        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ModelAndView</returns>
        public ModelAndView ErrorHtmlUsingPUT ()
        {
             ApiResponse<ModelAndView> localVarResponse = ErrorHtmlUsingPUTWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ModelAndView</returns>
        public ApiResponse< ModelAndView > ErrorHtmlUsingPUTWithHttpInfo ()
        {

            var localVarPath = "/error";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorHtmlUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelAndView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelAndView) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelAndView)));
        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ModelAndView</returns>
        public async System.Threading.Tasks.Task<ModelAndView> ErrorHtmlUsingPUTAsync ()
        {
             ApiResponse<ModelAndView> localVarResponse = await ErrorHtmlUsingPUTAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// errorHtml 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ModelAndView)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelAndView>> ErrorHtmlUsingPUTAsyncWithHttpInfo ()
        {

            var localVarPath = "/error";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErrorHtmlUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelAndView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelAndView) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelAndView)));
        }

    }
}
